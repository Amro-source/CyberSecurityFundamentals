import requests
import urllib3
from bs4 import BeautifulSoup
import re

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class VulnerabilityScanner:
    def __init__(self):
        self.session = requests.Session()
        self.session.verify = False

    def check_ssl_certificate(self, url):
        """Check SSL certificate validity"""
        try:
            response = self.session.get(url, timeout=10)
            return {
                'valid': True,
                'status_code': response.status_code
            }
        except requests.exceptions.SSLError:
            return {'valid': False, 'error': 'SSL Certificate Error'}
        except Exception as e:
            return {'valid': False, 'error': str(e)}

    def check_headers(self, url):
        """Check security headers"""
        try:
            response = self.session.get(url, timeout=10)
            headers = response.headers

            security_headers = {
                'X-Content-Type-Options': headers.get('X-Content-Type-Options'),
                'X-Frame-Options': headers.get('X-Frame-Options'),
                'X-XSS-Protection': headers.get('X-XSS-Protection'),
                'Strict-Transport-Security': headers.get('Strict-Transport-Security'),
                'Content-Security-Policy': headers.get('Content-Security-Policy')
            }

            missing_headers = [h for h, v in security_headers.items() if not v]
            return {
                'security_headers': security_headers,
                'missing_headers': missing_headers
            }
        except Exception as e:
            return {'error': str(e)}

    def check_forms(self, url):
        """Check for insecure forms"""
        try:
            response = self.session.get(url, timeout=10)
            soup = BeautifulSoup(response.content, 'html.parser')

            forms = soup.find_all('form')
            insecure_forms = []

            for form in forms:
                action = form.get('action', '')
                method = form.get('method', 'get').lower()

                # Check if form submits to HTTP (not HTTPS)
                if action.startswith('http://'):
                    insecure_forms.append({
                        'action': action,
                        'method': method,
                        'type': 'Insecure action URL'
                    })

                # Check for password inputs without autocomplete=off
                password_inputs = form.find_all('input', {'type': 'password'})
                for pwd_input in password_inputs:
                    if pwd_input.get('autocomplete') != 'off':
                        insecure_forms.append({
                            'action': action,
                            'method': method,
                            'type': 'Password field without autocomplete=off'
                        })

            return insecure_forms
        except Exception as e:
            return [{'error': str(e)}]

    def scan_url(self, url):
        """Perform comprehensive scan"""
        print(f"Scanning {url}...")

        # SSL Check
        ssl_result = self.check_ssl_certificate(url)
        print(f"SSL Check: {ssl_result}")

        # Headers Check
        headers_result = self.check_headers(url)
        print(f"Security Headers: {headers_result}")

        # Forms Check
        forms_result = self.check_forms(url)
        if forms_result:
            print(f"Insecure Forms: {forms_result}")
        else:
            print("No insecure forms found")


# Example usage
scanner = VulnerabilityScanner()

# Test with a real website (be respectful and check robots.txt)
# scanner.scan_url("https://httpbin.org")